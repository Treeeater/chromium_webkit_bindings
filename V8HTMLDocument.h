/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef V8HTMLDocument_h
#define V8HTMLDocument_h

#include "HTMLDocument.h"
#include "WrapperTypeInfo.h"
#include "wtf/text/StringHash.h"
#include <v8.h>
#include <wtf/HashMap.h>

namespace WebCore {

class V8HTMLDocument {

public:
    static bool HasInstance(v8::Handle<v8::Value> value);
    static v8::Persistent<v8::FunctionTemplate> GetRawTemplate();
    static v8::Persistent<v8::FunctionTemplate> GetTemplate();
    static HTMLDocument* toNative(v8::Handle<v8::Object>);
    static v8::Handle<v8::Object> wrap(HTMLDocument*, bool forceNewObject = false);
    static void derefObject(void*);
    static WrapperTypeInfo info;
  static v8::Local<v8::Object> WrapInShadowObject(v8::Local<v8::Object> wrapper, Node* impl);
  static v8::Handle<v8::Value> GetNamedProperty(HTMLDocument* htmlDocument, const AtomicString& key);
    static v8::Handle<v8::Value> openCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> writeCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> writelnCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> allAccessorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
    static void allAccessorSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static const int eventListenerCacheIndex = v8DefaultWrapperInternalFieldCount + 0;
    static const int implementationIndex = v8DefaultWrapperInternalFieldCount + 1;
    static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 2;
};

v8::Handle<v8::Value> toV8(HTMLDocument*, bool forceNewObject = false);
v8::Handle<v8::Value> toV8(PassRefPtr<HTMLDocument >, bool forceNewObject = false);
}

#endif // V8HTMLDocument_h
