/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#if ENABLE(3D_CANVAS)

#ifndef V8WebGLRenderingContext_h
#define V8WebGLRenderingContext_h

#include "WebGLRenderingContext.h"
#include "WrapperTypeInfo.h"
#include "wtf/text/StringHash.h"
#include <v8.h>
#include <wtf/HashMap.h>

namespace WebCore {

class V8WebGLRenderingContext {

public:
    static bool HasInstance(v8::Handle<v8::Value> value);
    static v8::Persistent<v8::FunctionTemplate> GetRawTemplate();
    static v8::Persistent<v8::FunctionTemplate> GetTemplate();
    static WebGLRenderingContext* toNative(v8::Handle<v8::Object>);
    static v8::Handle<v8::Object> wrap(WebGLRenderingContext*);
    static void derefObject(void*);
    static WrapperTypeInfo info;
    static v8::Handle<v8::Value> getAttachedShadersCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> getBufferParameterCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> getFramebufferAttachmentParameterCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> getParameterCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> getProgramParameterCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> getRenderbufferParameterCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> getShaderParameterCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> getTexParameterCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> getUniformCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> getVertexAttribCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniform1fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniform1ivCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniform2fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniform2ivCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniform3fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniform3ivCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniform4fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniform4ivCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniformMatrix2fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniformMatrix3fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> uniformMatrix4fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> vertexAttrib1fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> vertexAttrib2fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> vertexAttrib3fvCallback(const v8::Arguments&);
    static v8::Handle<v8::Value> vertexAttrib4fvCallback(const v8::Arguments&);
    static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 0;
};

v8::Handle<v8::Value> toV8(WebGLRenderingContext*);
v8::Handle<v8::Value> toV8(PassRefPtr<WebGLRenderingContext >);
}

#endif // V8WebGLRenderingContext_h
#endif // ENABLE(3D_CANVAS)

